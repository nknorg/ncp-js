// source: src/pb/packet.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.Packet', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Packet.repeatedFields_, null);
};
goog.inherits(proto.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Packet.displayName = 'proto.Packet';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Packet.repeatedFields_ = [3,4,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
sequenceId: jspb.Message.getFieldWithDefault(msg, 1, 0),
data: msg.getData_asB64(),
ackStartSeqList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
ackSeqCountList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
bytesRead: jspb.Message.getFieldWithDefault(msg, 5, 0),
clientIdsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
windowSize: jspb.Message.getFieldWithDefault(msg, 7, 0),
mtu: jspb.Message.getFieldWithDefault(msg, 8, 0),
close: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
handshake: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Packet}
 */
proto.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Packet;
  return proto.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Packet}
 */
proto.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequenceId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAckStartSeq(values[i]);
      }
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAckSeqCount(values[i]);
      }
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytesRead(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addClientIds(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWindowSize(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMtu(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClose(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHandshake(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequenceId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAckStartSeqList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getAckSeqCountList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = message.getBytesRead();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getClientIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getWindowSize();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getMtu();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getClose();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getHandshake();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional uint32 sequence_id = 1;
 * @return {number}
 */
proto.Packet.prototype.getSequenceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setSequenceId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Packet.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.Packet.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.Packet.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated uint32 ack_start_seq = 3;
 * @return {!Array<number>}
 */
proto.Packet.prototype.getAckStartSeqList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setAckStartSeqList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.addAckStartSeq = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.clearAckStartSeqList = function() {
  return this.setAckStartSeqList([]);
};


/**
 * repeated uint32 ack_seq_count = 4;
 * @return {!Array<number>}
 */
proto.Packet.prototype.getAckSeqCountList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setAckSeqCountList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.addAckSeqCount = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.clearAckSeqCountList = function() {
  return this.setAckSeqCountList([]);
};


/**
 * optional uint64 bytes_read = 5;
 * @return {number}
 */
proto.Packet.prototype.getBytesRead = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setBytesRead = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated string client_ids = 6;
 * @return {!Array<string>}
 */
proto.Packet.prototype.getClientIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setClientIdsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.addClientIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.clearClientIdsList = function() {
  return this.setClientIdsList([]);
};


/**
 * optional uint32 window_size = 7;
 * @return {number}
 */
proto.Packet.prototype.getWindowSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setWindowSize = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 mtu = 8;
 * @return {number}
 */
proto.Packet.prototype.getMtu = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setMtu = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool close = 9;
 * @return {boolean}
 */
proto.Packet.prototype.getClose = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setClose = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool handshake = 10;
 * @return {boolean}
 */
proto.Packet.prototype.getHandshake = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setHandshake = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


goog.object.extend(exports, proto);
